commandBuffer void vkCmdBeginDebugUtilsLabelEXT(commandBuffer , [In, Out] VkDebugUtilsLabelExt pLabelInfo);
commandBuffer void vkCmdBeginQueryIndexedEXT(commandBuffer , UInt64 queryPool, UInt32 query, VkQueryControlFlags flags, UInt32 index);
commandBuffer void vkCmdBeginRenderPass2KHR(commandBuffer , [In, Out] VkRenderPassBeginInfo pRenderPassBegin, VkSubpassBeginInfoKHR pSubpassBeginInfo);
commandBuffer void vkCmdBeginTransformFeedbackEXT(commandBuffer , UInt32 firstCounterBuffer, UInt32 counterBufferCount, UInt64[] pCounterBuffers, UInt64[] pCounterBufferOffsets);
commandBuffer void vkCmdBindShadingRateImageNV(commandBuffer , UInt64 imageView, MgImageLayout imageLayout);
commandBuffer void vkCmdBindTransformFeedbackBuffersEXT(commandBuffer , UInt32 firstBinding, UInt32 bindingCount, UInt64[] pBuffers, UInt64[] pOffsets, UInt64[] pSizes);
commandBuffer void vkCmdBuildAccelerationStructureNV(commandBuffer , [In, Out] VkAccelerationStructureInfoNV pInfo, UInt64 instanceData, UInt64 instanceOffset, VkBool32 update, UInt64 dst, UInt64 src, UInt64 scratch, UInt64 scratchOffset);
commandBuffer void vkCmdCopyAccelerationStructureNV(commandBuffer , UInt64 dst, UInt64 src, VkCopyAccelerationStructureModeNV mode);
commandBuffer void vkCmdDispatchBase(commandBuffer , UInt32 baseGroupX, UInt32 baseGroupY, UInt32 baseGroupZ, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ);
commandBuffer void vkCmdDrawIndexedIndirectCountKHR(commandBuffer , UInt64 buffer, UInt64 offset, UInt64 countBuffer, UInt64 countBufferOffset, UInt32 maxDrawCount, UInt32 stride);
commandBuffer void vkCmdDrawIndirectByteCountEXT(commandBuffer , UInt32 instanceCount, UInt32 firstInstance, UInt64 counterBuffer, UInt64 counterBufferOffset, UInt32 counterOffset, UInt32 vertexStride);
commandBuffer void vkCmdDrawIndirectCountKHR(commandBuffer , UInt64 buffer, UInt64 offset, UInt64 countBuffer, UInt64 countBufferOffset, UInt32 maxDrawCount, UInt32 stride);
commandBuffer void vkCmdDrawMeshTasksIndirectCountNV(commandBuffer , UInt64 buffer, UInt64 offset, UInt64 countBuffer, UInt64 countBufferOffset, UInt32 maxDrawCount, UInt32 stride);
commandBuffer void vkCmdDrawMeshTasksIndirectNV(commandBuffer , UInt64 buffer, UInt64 offset, UInt32 drawCount, UInt32 stride);
commandBuffer void vkCmdDrawMeshTasksNV(commandBuffer , UInt32 taskCount, UInt32 firstTask);
commandBuffer void vkCmdEndDebugUtilsLabelEXT(commandBuffer );
commandBuffer void vkCmdEndQueryIndexedEXT(commandBuffer , UInt64 queryPool, UInt32 query, UInt32 index);
commandBuffer void vkCmdEndRenderPass2KHR(commandBuffer , VkSubpassEndInfoKHR pSubpassEndInfo);
commandBuffer void vkCmdEndTransformFeedbackEXT(commandBuffer , UInt32 firstCounterBuffer, UInt32 counterBufferCount, UInt64[] pCounterBuffers, UInt64[] pCounterBufferOffsets);
commandBuffer void vkCmdInsertDebugUtilsLabelEXT(commandBuffer , [In, Out] VkDebugUtilsLabelExt pLabelInfo);
commandBuffer void vkCmdNextSubpass2KHR(commandBuffer , VkSubpassBeginInfoKHR pSubpassBeginInfo, VkSubpassEndInfoKHR pSubpassEndInfo);
commandBuffer void vkCmdPushDescriptorSetKHR(commandBuffer , MgPipelineBindPoint pipelineBindPoint, UInt64 layout, UInt32 set, UInt32 descriptorWriteCount, [In, Out] VkWriteDescriptorSet[] pDescriptorWrites);
commandBuffer void vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer , UInt64 descriptorUpdateTemplate, UInt64 layout, UInt32 set, IntPtr pData);
commandBuffer void vkCmdSetCheckpointNV(commandBuffer , IntPtr pCheckpointMarker);
commandBuffer void vkCmdSetCoarseSampleOrderNV(commandBuffer , VkCoarseSampleOrderTypeNV sampleOrderType, UInt32 customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders);
commandBuffer void vkCmdSetDeviceMask(commandBuffer , UInt32 deviceMask);
commandBuffer void vkCmdSetDiscardRectangleEXT(commandBuffer , UInt32 firstDiscardRectangle, UInt32 discardRectangleCount, MgRect2D* pDiscardRectangles);
commandBuffer void vkCmdSetExclusiveScissorNV(commandBuffer , UInt32 firstExclusiveScissor, UInt32 exclusiveScissorCount, MgRect2D* pExclusiveScissors);
commandBuffer void vkCmdSetSampleLocationsEXT(commandBuffer , VkSampleLocationsInfoExt pSampleLocationsInfo);
commandBuffer void vkCmdSetViewportShadingRatePaletteNV(commandBuffer , UInt32 firstViewport, UInt32 viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes);
commandBuffer void vkCmdSetViewportWScalingNV(commandBuffer , UInt32 firstViewport, UInt32 viewportCount, VkViewportWScalingNV* pViewportWScalings);
commandBuffer void vkCmdTraceRaysNV(commandBuffer , UInt64 raygenShaderBindingTableBuffer, UInt64 raygenShaderBindingOffset, UInt64 missShaderBindingTableBuffer, UInt64 missShaderBindingOffset, UInt64 missShaderBindingStride, UInt64 hitShaderBindingTableBuffer, UInt64 hitShaderBindingOffset, UInt64 hitShaderBindingStride, UInt64 callableShaderBindingTableBuffer, UInt64 callableShaderBindingOffset, UInt64 callableShaderBindingStride, UInt32 width, UInt32 height, UInt32 depth);
commandBuffer void vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer , UInt32 accelerationStructureCount, UInt64[] pAccelerationStructures, VkQueryType queryType, UInt64 queryPool, UInt32 firstQuery);
commandBuffer void vkCmdWriteBufferMarkerAMD(commandBuffer , VkPipelineStageFlags pipelineStage, UInt64 dstBuffer, UInt64 dstOffset, UInt32 marker);
device MgResult vkAcquireImageANDROID(device , UInt64 image, int nativeFenceFd, UInt64 semaphore, UInt64 fence);
device MgResult vkAcquireNextImage2KHR(device , [In, Out] VkAcquireNextImageInfoKHR pAcquireInfo, ref UInt32 pImageIndex);
device MgResult vkBindAccelerationStructureMemoryNV(device , UInt32 bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos);
device MgResult vkBindBufferMemory2(device , UInt32 bindInfoCount, VkBindBufferMemoryInfo* pBindInfos);
device MgResult vkBindImageMemory2(device , UInt32 bindInfoCount, VkBindImageMemoryInfo* pBindInfos);
device MgResult vkCompileDeferredNV(device , UInt64 pipeline, UInt32 shader);
device MgResult vkCreateAccelerationStructureNV(device , [In, Out] VkAccelerationStructureCreateInfoNV pCreateInfo, IntPtr pAllocator, ref UInt64 pAccelerationStructure);
device MgResult vkCreateDescriptorUpdateTemplate(device , [In, Out] VkDescriptorUpdateTemplateCreateInfo pCreateInfo, IntPtr pAllocator, ref UInt64 pDescriptorUpdateTemplate);
device MgResult vkCreateRayTracingPipelinesNV(device , UInt64 pipelineCache, UInt32 createInfoCount, [In, Out] VkRayTracingPipelineCreateInfoNV[] pCreateInfos, IntPtr pAllocator, UInt64[] pPipelines);
device MgResult vkCreateRenderPass2KHR(device , [In, Out] VkRenderPassCreateInfo2KHR pCreateInfo, IntPtr pAllocator, ref UInt64 pRenderPass);
device MgResult vkCreateSamplerYcbcrConversion(device , VkSamplerYcbcrConversionCreateInfo pCreateInfo, IntPtr pAllocator, UInt64* pYcbcrConversion);
device MgResult vkCreateValidationCacheEXT(device , [In, Out] VkValidationCacheCreateInfoExt pCreateInfo, IntPtr pAllocator, ref UInt64 pValidationCache);
device MgResult vkDisplayPowerControlEXT(device , UInt64 display, VkDisplayPowerInfoExt pDisplayPowerInfo);
device MgResult vkGetAccelerationStructureHandleNV(device , UInt64 accelerationStructure, UIntPtr dataSize, IntPtr[] pData);
device MgResult vkGetAndroidHardwareBufferPropertiesANDROID(device , AHardwareBuffer[] buffer, VkAndroidHardwareBufferPropertiesANDROID pProperties);
device MgResult vkGetCalibratedTimestampsEXT(device , UInt32 timestampCount, VkCalibratedTimestampInfoExt* pTimestampInfos, UInt64* pTimestamps, UInt64* pMaxDeviation);
device MgResult vkGetDeviceGroupPresentCapabilitiesKHR(device , [In, Out] VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities);
device MgResult vkGetDeviceGroupSurfacePresentModesKHR(device , UInt64 surface, ref VkDeviceGroupPresentModeFlagsKHR pModes);
device MgResult vkGetFenceFdKHR(device , VkFenceGetFdInfoKHR pGetFdInfo, ref int pFd);
device MgResult vkGetFenceWin32HandleKHR(device , VkFenceGetWin32HandleInfoKHR pGetWin32HandleInfo, ref IntPtr pHandle);
device MgResult vkGetImageDrmFormatModifierPropertiesEXT(device , UInt64 image, VkImageDrmFormatModifierPropertiesEXT pProperties);
device MgResult vkGetMemoryAndroidHardwareBufferANDROID(device , VkMemoryGetAndroidHardwareBufferInfoANDROID pInfo, ref AHardwareBuffer pBuffer);
device MgResult vkGetMemoryFdKHR(device , VkMemoryGetFdInfoKHR pGetFdInfo, ref int pFd);
device MgResult vkGetMemoryFdPropertiesKHR(device , VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdPropertiesKHR pMemoryFdProperties);
device MgResult vkGetMemoryHostPointerPropertiesEXT(device , VkExternalMemoryHandleTypeFlags handleType, IntPtr pHostPointer, VkMemoryHostPointerPropertiesExt* pMemoryHostPointerProperties);
device MgResult vkGetMemoryWin32HandleKHR(device , VkMemoryGetWin32HandleInfoKHR pGetWin32HandleInfo, ref IntPtr pHandle);
device MgResult vkGetMemoryWin32HandlePropertiesKHR(device , VkExternalMemoryHandleTypeFlags handleType, IntPtr handle, VkMemoryWin32HandlePropertiesKHR pMemoryWin32HandleProperties);
device MgResult vkGetPastPresentationTimingGOOGLE(device , UInt64 swapchain, UInt32* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings);
device MgResult vkGetRayTracingShaderGroupHandlesNV(device , UInt64 pipeline, UInt32 firstGroup, UInt32 groupCount, UIntPtr dataSize, IntPtr[] pData);
device MgResult vkGetRefreshCycleDurationGOOGLE(device , UInt64 swapchain, VkRefreshCycleDurationGOOGLE pDisplayTimingProperties);
device MgResult vkGetSemaphoreFdKHR(device , VkSemaphoreGetFdInfoKHR pGetFdInfo, ref int pFd);
device MgResult vkGetSemaphoreWin32HandleKHR(device , VkSemaphoreGetWin32HandleInfoKHR pGetWin32HandleInfo, ref IntPtr pHandle);
device MgResult vkGetShaderInfoAMD(device , UInt64 pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, ref UIntPtr pInfoSize, IntPtr[] pInfo);
device MgResult vkGetSwapchainCounterEXT(device , UInt64 swapchain, VkSurfaceCounterFlagsExt counter, ref UInt64 pCounterValue);
device MgResult vkGetSwapchainGrallocUsageANDROID(device , MgFormat format, VkImageUsageFlags imageUsage, ref int grallocUsage);
device MgResult vkGetSwapchainStatusKHR(device , UInt64 swapchain);
device MgResult vkGetValidationCacheDataEXT(device , UInt64 validationCache, ref UIntPtr pDataSize, IntPtr[] pData);
device MgResult vkImportFenceFdKHR(device , [In, Out] VkImportFenceFdInfoKHR pImportFenceFdInfo);
device MgResult vkImportFenceWin32HandleKHR(device , [In, Out] VkImportFenceWin32HandleInfoKHR pImportFenceWin32HandleInfo);
device MgResult vkImportSemaphoreFdKHR(device , [In, Out] VkImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo);
device MgResult vkImportSemaphoreWin32HandleKHR(device , [In, Out] VkImportSemaphoreWin32HandleInfoKHR pImportSemaphoreWin32HandleInfo);
device MgResult vkMergeValidationCachesEXT(device , UInt64 dstCache, UInt32 srcCacheCount, UInt64[] pSrcCaches);
device MgResult vkRegisterDeviceEventEXT(device , VkDeviceEventInfoExt pDeviceEventInfo, IntPtr pAllocator, UInt64* pFence);
device MgResult vkRegisterDisplayEventEXT(device , UInt64 display, VkDisplayEventInfoExt pDisplayEventInfo, IntPtr pAllocator, UInt64* pFence);
device MgResult vkSetDebugUtilsObjectNameEXT(device , [In, Out] VkDebugUtilsObjectNameInfoExt pNameInfo);
device MgResult vkSetDebugUtilsObjectTagEXT(device , VkDebugUtilsObjectTagInfoExt pTagInfo);
device void vkDestroyAccelerationStructureNV(device , UInt64 accelerationStructure, IntPtr pAllocator);
device void vkDestroyDescriptorUpdateTemplate(device , UInt64 descriptorUpdateTemplate, IntPtr pAllocator);
device void vkDestroySamplerYcbcrConversion(device , UInt64 ycbcrConversion, IntPtr pAllocator);
device void vkDestroyValidationCacheEXT(device , UInt64 validationCache, IntPtr pAllocator);
device void vkGetAccelerationStructureMemoryRequirementsNV(device , VkAccelerationStructureMemoryRequirementsInfoNV pInfo, VkMemoryRequirements2KHR* pMemoryRequirements);
device void vkGetBufferMemoryRequirements2(device , VkBufferMemoryRequirementsInfo2 pInfo, [In, Out] VkMemoryRequirements2 pMemoryRequirements);
device void vkGetDescriptorSetLayoutSupport(device , [In, Out] VkDescriptorSetLayoutCreateInfo pCreateInfo, VkDescriptorSetLayoutSupport pSupport);
device void vkGetDeviceGroupPeerMemoryFeatures(device , UInt32 heapIndex, UInt32 localDeviceIndex, UInt32 remoteDeviceIndex, ref VkPeerMemoryFeatureFlags pPeerMemoryFeatures);
device void vkGetDeviceQueue2(device , [In, Out] VkDeviceQueueInfo2 pQueueInfo, ref IntPtr pQueue);
device void vkGetImageMemoryRequirements2(device , VkImageMemoryRequirementsInfo2 pInfo, [In, Out] VkMemoryRequirements2 pMemoryRequirements);
device void vkGetImageSparseMemoryRequirements2(device , VkImageSparseMemoryRequirementsInfo2 pInfo, UInt32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
device void vkSetHdrMetadataEXT(device , UInt32 swapchainCount, UInt64* pSwapchains, VkHdrMetadataExt* pMetadata);
device void vkTrimCommandPool(device , UInt64 commandPool, VkCommandPoolTrimFlags flags);
device void vkUpdateDescriptorSetWithTemplate(device , UInt64 descriptorSet, UInt64 descriptorUpdateTemplate, IntPtr pData);
instance MgResult vkCreateDebugUtilsMessengerEXT, ref VkDebugUtilsMessengerCreateInfoEXT pCreateInfo, IntPtr pAllocator, ref UInt64 pMessenger);
instance MgResult vkCreateIOSSurfaceMVK(instance , [In, Out] VkIOSSurfaceCreateInfoMVK pCreateInfo, IntPtr pAllocator, ref UInt64 pSurface);
instance MgResult vkCreateMacOSSurfaceMVK(instance , [In, Out] VkMacOSSurfaceCreateInfoMVK pCreateInfo, IntPtr pAllocator, ref UInt64 pSurface);
instance MgResult vkEnumeratePhysicalDeviceGroups(instance , ref UInt32 pPhysicalDeviceGroupCount, [In, Out] VkPhysicalDeviceGroupProperties[] pPhysicalDeviceGroupProperties);
instance void vkDestroyDebugUtilsMessengerEXT(instance , UInt64 messenger, IntPtr pAllocator);
instance void vkSubmitDebugUtilsMessageEXT(instance , MgDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, MgDebugUtilsMessageTypeFlagBitsEXT messageTypes, [In, Out] VkDebugUtilsMessengerCallbackDataEXT pCallbackData);
physicalDevice MgResult vkAcquireXlibDisplayEXT(physicalDevice , ref Display dpy, UInt64 display);
physicalDevice MgResult vkGetDisplayModeProperties2KHR(physicalDevice , UInt64 display, ref UInt32 pPropertyCount, [In, Out] VkDisplayModeProperties2KHR[] pProperties);
physicalDevice MgResult vkGetDisplayPlaneCapabilities2KHR(physicalDevice , [In, Out] VkDisplayPlaneInfo2KHR pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR pCapabilities);
physicalDevice MgResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice , ref UInt32 pTimeDomainCount, VkTimeDomainExt[] pTimeDomains);
physicalDevice MgResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice , ref UInt32 pPropertyCount, [In, Out] VkDisplayPlaneProperties2KHR[] pProperties);
physicalDevice MgResult vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice , ref UInt32 pPropertyCount, [In, Out] VkDisplayProperties2KHR[] pProperties);
physicalDevice MgResult vkGetPhysicalDeviceImageFormatProperties2(physicalDevice , VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo, VkImageFormatProperties2 pImageFormatProperties);
physicalDevice MgResult vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice , UInt64 surface, UInt32 pRectCount, MgRect2D* pRects);
physicalDevice MgResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice , UInt64 surface, VkSurfaceCapabilities2Ext pSurfaceCapabilities);
physicalDevice MgResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice , [In, Out] VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, VkSurfaceCapabilities2KHR pSurfaceCapabilities);
physicalDevice MgResult vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice , [In, Out] VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref UInt32 pSurfaceFormatCount, VkSurfaceFormat2KHR[] pSurfaceFormats);
physicalDevice MgResult vkGetRandROutputDisplayEXT(physicalDevice , ref Display dpy, RROutput rrOutput, ref UInt64 pDisplay);
physicalDevice MgResult vkReleaseDisplayEXT(physicalDevice , UInt64 display);
physicalDevice void vkGetPhysicalDeviceExternalBufferProperties(physicalDevice , VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo, VkExternalBufferProperties pExternalBufferProperties);
physicalDevice void vkGetPhysicalDeviceExternalFenceProperties(physicalDevice , VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo, VkExternalFenceProperties pExternalFenceProperties);
physicalDevice void vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice , VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, VkExternalSemaphoreProperties pExternalSemaphoreProperties);
physicalDevice void vkGetPhysicalDeviceFeatures2(physicalDevice , VkPhysicalDeviceFeatures2* pFeatures);
physicalDevice void vkGetPhysicalDeviceFormatProperties2(physicalDevice , MgFormat format, VkFormatProperties2 pFormatProperties);
physicalDevice void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice , VkDeviceGeneratedCommandsFeaturesNVX* pFeatures, VkDeviceGeneratedCommandsLimitsNVX* pLimits);
physicalDevice void vkGetPhysicalDeviceMemoryProperties2(physicalDevice , [In, Out] VkPhysicalDeviceMemoryProperties2 pMemoryProperties);
physicalDevice void vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice , VkSampleCountFlags samples, VkMultisamplePropertiesExt pMultisampleProperties);
physicalDevice void vkGetPhysicalDeviceProperties2(physicalDevice , [In, Out] VkPhysicalDeviceProperties2 pProperties);
physicalDevice void vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice , UInt32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
physicalDevice void vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice , VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo, UInt32* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
queue MgResult vkQueueSignalReleaseImageANDROID(queue , UInt32 waitSemaphoreCount, UInt64 pWaitSemaphores, UInt64 image, ref int pNativeFenceFd);
queue void vkGetQueueCheckpointDataNV(queue , ref UInt32 pCheckpointDataCount, [In, Out] VkCheckpointDataNV[] pCheckpointData);
queue void vkQueueBeginDebugUtilsLabelEXT(queue , ref VkDebugUtilsLabelEXT pLabelInfo);
queue void vkQueueEndDebugUtilsLabelEXT(queue );
queue void vkQueueInsertDebugUtilsLabelEXT(queue , ref VkDebugUtilsLabelEXT pLabelInfo);